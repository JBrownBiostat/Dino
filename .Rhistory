facet_grid(normType ~ ., scale = "free_y") +
geom_point(aes(y = y), size = 0.5) +
geom_vline(xintercept = quantile(normList$l10Depth, c(0.05, 0.25, 0.75, 0.95)),
lty = "dashed") +
scale_color_manual(values = normTypeCols) +
xlim(quantile(plotDat$x, probs = c(0.005, 0.995))) +
scale_y_continuous(expand = expansion(mult = c(0, .15))) +
labs(x = "LS (log10)", y = "Normalized expression", title = "") +
geom_smooth(aes(y = y), method = "lm", formula = y~x, color = "black") +
geom_text(data = textDat, aes(y = y, label = quantLab), color = "black",
size = 12 * 0.352777778, vjust = 0.25) +
themeObj +
theme(
legend.position = "none"
)
p.1a
p.1a <- ggplot(plotDat, aes(x = x, color = normType)) +
theme_classic() +
facet_grid(normType ~ ., scale = "free_y") +
geom_point(aes(y = y), size = 0.5) +
geom_vline(xintercept = quantile(normList$l10Depth, c(0.05, 0.25, 0.75, 0.95)),
lty = "dashed") +
scale_color_manual(values = normTypeCols) +
xlim(quantile(plotDat$x, probs = c(0.005, 0.995))) +
scale_y_continuous(expand = expansion(mult = c(0, .15))) +
labs(x = "LS (log10)", y = "Normalized expression", title = "") +
geom_smooth(aes(y = y), method = "lm", formula = y~x, color = "black") +
geom_text(data = textDat, aes(y = y, label = quantLab), color = "black",
size = 12 * 0.352777778, vjust = 0) +
themeObj +
theme(
legend.position = "none"
)
p.1a
p.1a <- ggplot(plotDat, aes(x = x, color = normType)) +
theme_classic() +
facet_grid(normType ~ ., scale = "free_y") +
geom_point(aes(y = y), size = 0.5) +
geom_vline(xintercept = quantile(normList$l10Depth, c(0.05, 0.25, 0.75, 0.95)),
lty = "dashed") +
scale_color_manual(values = normTypeCols) +
xlim(quantile(plotDat$x, probs = c(0.005, 0.995))) +
scale_y_continuous(expand = expansion(mult = c(0, .15))) +
labs(x = "LS (log10)", y = "Normalized expression", title = "") +
geom_smooth(aes(y = y), method = "lm", formula = y~x, color = "black") +
geom_text(data = textDat, aes(y = y, label = quantLab), color = "black",
size = 12 * 0.352777778, vjust = 1) +
themeObj +
theme(
legend.position = "none"
)
p.1a
p.1a <- ggplot(plotDat, aes(x = x, color = normType)) +
theme_classic() +
facet_grid(normType ~ ., scale = "free_y") +
geom_point(aes(y = y), size = 0.5) +
geom_vline(xintercept = quantile(normList$l10Depth, c(0.05, 0.25, 0.75, 0.95)),
lty = "dashed") +
scale_color_manual(values = normTypeCols) +
xlim(quantile(plotDat$x, probs = c(0.005, 0.995))) +
scale_y_continuous(expand = expansion(mult = c(0, .15))) +
labs(x = "LS (log10)", y = "Normalized expression", title = "") +
geom_smooth(aes(y = y), method = "lm", formula = y~x, color = "black") +
geom_text(data = textDat, aes(y = y, label = quantLab), color = "black",
size = 12 * 0.352777778, vjust = 0.8) +
themeObj +
theme(
legend.position = "none"
)
p.1a
p.1a <- ggplot(plotDat, aes(x = x, color = normType)) +
theme_classic() +
facet_grid(normType ~ ., scale = "free_y") +
geom_point(aes(y = y), size = 0.5) +
geom_vline(xintercept = quantile(normList$l10Depth, c(0.05, 0.25, 0.75, 0.95)),
lty = "dashed") +
scale_color_manual(values = normTypeCols) +
xlim(quantile(plotDat$x, probs = c(0.005, 0.995))) +
scale_y_continuous(expand = expansion(mult = c(0, .15))) +
labs(x = "LS (log10)", y = "Normalized expression", title = "") +
geom_smooth(aes(y = y), method = "lm", formula = y~x, color = "black") +
geom_text(data = textDat, aes(y = y, label = quantLab), color = "black",
size = 12 * 0.352777778, vjust = 0.5) +
themeObj +
theme(
legend.position = "none"
)
p.1a
p.1a <- ggplot(plotDat, aes(x = x, color = normType)) +
theme_classic() +
facet_grid(normType ~ ., scale = "free_y") +
geom_point(aes(y = y), size = 0.5) +
geom_vline(xintercept = quantile(normList$l10Depth, c(0.05, 0.25, 0.75, 0.95)),
lty = "dashed") +
scale_color_manual(values = normTypeCols) +
xlim(quantile(plotDat$x, probs = c(0.005, 0.995))) +
scale_y_continuous(expand = expansion(mult = c(0, .15))) +
labs(x = "LS (log10)", y = "Normalized expression", title = "") +
geom_smooth(aes(y = y), method = "lm", formula = y~x, color = "black") +
geom_text(data = textDat, aes(y = y, label = quantLab), color = "black",
size = 12 * 0.352777778, vjust = 0.6) +
themeObj +
theme(
legend.position = "none"
)
p.1a
p.1a <- annotate_figure(p.1a, fig.lab = "a", fig.lab.size = 21, fig.lab.face = "bold")
save(p.1a,
file = paste0(Save_Dir, "p1a_V3.RData"),
compress = "xz")
LowInd <- (normList$l10Depth >= quantile(normList$l10Depth, 0.05) &
normList$l10Depth <= quantile(normList$l10Depth, 0.25))
HighInd <- (normList$l10Depth >= quantile(normList$l10Depth, 0.75) &
normList$l10Depth <= quantile(normList$l10Depth, 0.95))
plotDat <- data.frame(
x = rep(c(normList$l10Depth[LowInd], normList$l10Depth[HighInd]), 3),
y = c(
log(normList$Dino[g, LowInd] + 1), log(normList$Dino[g, HighInd] + 1),
log(normList$Scran[g, LowInd] + 1), log(normList$Scran[g, HighInd] + 1),
normList$scTrans$y[g, LowInd], normList$scTrans$y[g, HighInd]
),
LowHigh = rep(c(rep("Low", sum(LowInd)), rep("High", sum(HighInd))), 3),
normType = rep(c("Dino", "Scran", "scTrans"), each = sum(LowInd) + sum(HighInd)),
normTypeColor = rep(
c("Dino: Low-LS", "Dino: High-LS",
"Scran: Low-LS", "Scran: High-LS",
"scTrans: Low-LS", "scTrans: High-LS"),
rep(c(sum(LowInd), sum(HighInd)), 3)
)
)
plotDat$normType <- factor(plotDat$normType, ordered = T,
levels = c("Scran", "scTrans", "Dino"))
plotDat$LowHigh <- factor(plotDat$LowHigh, ordered = T, levels = c("Low", "High"))
plotDat$normTypeColor <- factor(plotDat$normTypeColor, ordered = T,
levels = c("Scran: Low-LS", "Scran: High-LS",
"scTrans: Low-LS", "scTrans: High-LS",
"Dino: Low-LS", "Dino: High-LS"))
a <- 0.5
densColVec <- normTypeCols
refCol <- normTypeCols["Scran"]
colVec <- (c(col2rgb(refCol)) / 255) * a + (1 - a) * rep(0.1, 3)
densColVec <- c(densColVec, rgb(colVec[1], colVec[2], colVec[3], 1))
refCol <- normTypeCols["scTrans"]
colVec <- (c(col2rgb(refCol)) / 255) * a + (1 - a) * rep(0.1, 3)
densColVec <- c(densColVec, rgb(colVec[1], colVec[2], colVec[3], 1))
refCol <- normTypeCols["Dino"]
colVec <- (c(col2rgb(refCol)) / 255) * a + (1 - a) * rep(0.1, 3)
densColVec <- c(densColVec, rgb(colVec[1], colVec[2], colVec[3], 1))
names(densColVec) <- c(paste0(names(normTypeCols), ": High-LS"), "Scran: Low-LS", "scTrans: Low-LS", "Dino: Low-LS")
bwVec <- c()
for(i in c("Scran", "scTrans", "Dino")) {
yVec <- plotDat$y[plotDat$normType == i]
yVec[yVec <= 0] <- 0
bwVec[length(bwVec) + 1] <- 2 * bw.nrd0(yVec)
}
names(bwVec) <- c("Scran", "scTrans", "Dino")
plotDat$bw <- ifelse(plotDat$normType == "Scran", bwVec[1],
ifelse(plotDat$normType == "scTrans", bwVec[2], bwVec[3]))
p.1b <- ggplot(plotDat, aes(x = y, color = normTypeColor, fill = normTypeColor)) +
theme_classic() +
facet_wrap(normType ~ ., ncol = 1, scales = "free", strip.position = "right") +
geom_density(alpha = 0, bw = 10, lwd = 0)
for(i in c("Scran", "scTrans", "Dino")) {
yVec <- plotDat$y[plotDat$normType == i]
yVec[yVec <= 0] <- 0
p.1b <- p.1b +
geom_density(alpha = 0.25, lwd = 1,
bw = bw.nrd0(yVec) * 2,
aes(x = y, color = normTypeColor, fill = normTypeColor),
data = plotDat[plotDat$normType == i, ],
inherit.aes = F)
}
p.1b <- p.1b  +
scale_color_manual(values = densColVec, labels = rep(c("High", "Low"), 3)) +
scale_fill_manual(values = densColVec, labels = rep(c("High", "Low"), 3)) +
scale_y_continuous(trans = "sqrt") +
themeObj +
labs(x = "Normalized expression", y = "Density", color = "LS\nSubset", fill = "LS\nSubset") +
theme(legend.position = "right")
p.1b
p.1b <- annotate_figure(p.1b, fig.lab = "b", fig.lab.size = 21, fig.lab.face = "bold")
save(p.1b,
file = paste0(Save_Dir, "p1b_V3.RData"),
compress = "xz")
save(LowInd, HighInd, plotDat, p.1b,
file = paste0(Save_Dir, "p1bData_V3.RData"),
compress = "xz")
##########################
## Fig 1C: Low-High Q-Q ##
##########################
quantFun <- function(x, subInd, sampInd) {
nQuant <- 60
quantile(x[subInd], probs = seq(1 / (2 * nQuant), 1 - 1 / (2 * nQuant), length = nQuant))
}
buildQQ.func <- function(normDat, depthVec, clustID, normMethod, geneInd, doLog = T) {
quantDat <- data.frame(
QLow = c(),
QHigh = c(),
normMethod = c()
)
for(ct in unique(clustID)) {
subCell <- which(clustID == ct)
if(length(subCell) < 200) {next}
subDepth <- depthVec[subCell]
LowInd <- (subDepth >= quantile(subDepth, 0.05) &
subDepth <= quantile(subDepth, 0.25))
HighInd <- (subDepth >= quantile(subDepth, 0.75) &
subDepth <= quantile(subDepth, 0.95))
if(doLog) {
quantDat <- rbind(
quantDat,
data.frame(
QLow = c(apply(log1p(normDat[geneInd, subCell, drop = F]), 1, quantFun,
subInd = LowInd, sampInd = LowInd | HighInd)),
QHigh = c(apply(log1p(normDat[geneInd, , drop = F]), 1, quantFun,
subInd = HighInd, sampInd = LowInd | HighInd)),
normMethod = normMethod
)
)
} else {
quantDat <- rbind(
quantDat,
data.frame(
QLow = c(apply(normDat[geneInd, subCell, drop = F], 1, quantFun,
subInd = LowInd, sampInd = LowInd | HighInd)),
QHigh = c(apply(normDat[geneInd, , drop = F], 1, quantFun,
subInd = HighInd, sampInd = LowInd | HighInd)),
normMethod = normMethod
)
)
}
}
quantDat <- quantDat[abs(quantDat$QLow) > 1e-3 * max(abs(quantDat$QLow)) |
abs(quantDat$QHigh) > 1e-3 * max(abs(quantDat$QHigh)), ]
quantDat <- quantDat[quantDat$QLow >= min(quantile(quantDat$QLow, 5e-3), 0) &
quantDat$QLow <= quantile(quantDat$QLow, 1 - 5e-3), ]
quantDat <- quantDat[quantDat$QHigh >= min(quantile(quantDat$QHigh, 5e-3), 0) &
quantDat$QHigh <= quantile(quantDat$QHigh, 1 - 5e-3), ]
quantDat$normType = normMethod
return(quantDat)
}
## Clusters ##
clustVec <- match(annVec, sort(unique(annVec)))
## QQ Plots ##
exprLvl <- rowMeans(log1p(normList$UMI))
exprDens <- density(exprLvl, bw = "SJ")
exprDens <- approxfun(exprDens$x, exprDens$y)
geneInd <- sample.int(nrow(normList$UMI), 600, prob = 1 / exprDens(exprLvl) *
(exprLvl <= quantile(exprLvl, 0.9)))
ScranQQ <- buildQQ.func(normListAll$Scran, normListAll$l10Depth,
clustVec, "Scran", geneInd)
scTransQQ <- buildQQ.func(normListAll$scTrans$y, normListAll$l10Depth,
clustVec, "scTrans", geneInd, doLog = F)
DinoQQ <- buildQQ.func(normListAll$Dino, normListAll$l10Depth,
clustVec, "Dino", geneInd)
plotDat <- rbind(ScranQQ, scTransQQ, DinoQQ)
plotDat$normType <- factor(plotDat$normType, ordered = T,
levels = c("Scran", "scTrans", "Dino"))
p.1c <- ggplot(plotDat, aes(x = QHigh, y = QLow)) +
theme_classic() +
facet_wrap(normType ~ ., nrow = 1, scale = "free") +
geom_hex(bins = 60, aes(fill = log10(..count..))) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "red") +
scale_fill_viridis_c(option = "A", limits = c(0, 4.001), oob = scales::squish) +
labs(x = "High LS quantiles", y = "Low LS quantiles", fill = "Log10\nCounts") +
themeObj
p.1c
p.1c <- annotate_figure(p.1c, fig.lab = "c", fig.lab.size = 21, fig.lab.face = "bold")
p.1c
save(p.1c,
file = paste0(Save_Dir, "p1c_V3.RData"),
compress = "xz")
##################
## Build figure ##
##################
jpeg(paste0(Save_Dir, "Fig1.jpeg"), width = 8, height = 8, units = "in", res = 400, quality = 0.99)
grid.arrange(p.1a, p.1b, p.1c,
layout_matrix = rbind(
c(1, 2, 2),
c(3, 3, 3)
), widths = c(1, 1 / 7, 4 / 7), heights = c(1.4, 1))
dev.off()
jpeg(paste0(Save_Dir, "Fig1.jpeg"), width = 8, height = 8, units = "in", res = 400, quality = 0.99)
grid.arrange(p.1a, p.1b, p.1c,
layout_matrix = rbind(
c(1, 2, 2),
c(3, 3, 3)
), widths = c(1, 1 / 7, 5 / 7), heights = c(1.4, 1))
dev.off()
LowInd <- (normList$l10Depth >= quantile(normList$l10Depth, 0.05) &
normList$l10Depth <= quantile(normList$l10Depth, 0.25))
HighInd <- (normList$l10Depth >= quantile(normList$l10Depth, 0.75) &
normList$l10Depth <= quantile(normList$l10Depth, 0.95))
plotDat <- data.frame(
x = rep(c(normList$l10Depth[LowInd], normList$l10Depth[HighInd]), 3),
y = c(
log(normList$Dino[g, LowInd] + 1), log(normList$Dino[g, HighInd] + 1),
log(normList$Scran[g, LowInd] + 1), log(normList$Scran[g, HighInd] + 1),
normList$scTrans$y[g, LowInd], normList$scTrans$y[g, HighInd]
),
LowHigh = rep(c(rep("Low", sum(LowInd)), rep("High", sum(HighInd))), 3),
normType = rep(c("Dino", "Scran", "scTrans"), each = sum(LowInd) + sum(HighInd)),
normTypeColor = rep(
c("Dino: Low-LS", "Dino: High-LS",
"Scran: Low-LS", "Scran: High-LS",
"scTrans: Low-LS", "scTrans: High-LS"),
rep(c(sum(LowInd), sum(HighInd)), 3)
)
)
plotDat$normType <- factor(plotDat$normType, ordered = T,
levels = c("Scran", "scTrans", "Dino"))
plotDat$LowHigh <- factor(plotDat$LowHigh, ordered = T, levels = c("Low", "High"))
plotDat$normTypeColor <- factor(plotDat$normTypeColor, ordered = T,
levels = c("Scran: Low-LS", "Scran: High-LS",
"scTrans: Low-LS", "scTrans: High-LS",
"Dino: Low-LS", "Dino: High-LS"))
a <- 0.5
densColVec <- normTypeCols
refCol <- normTypeCols["Scran"]
colVec <- (c(col2rgb(refCol)) / 255) * a + (1 - a) * rep(0.1, 3)
densColVec <- c(densColVec, rgb(colVec[1], colVec[2], colVec[3], 1))
refCol <- normTypeCols["scTrans"]
colVec <- (c(col2rgb(refCol)) / 255) * a + (1 - a) * rep(0.1, 3)
densColVec <- c(densColVec, rgb(colVec[1], colVec[2], colVec[3], 1))
refCol <- normTypeCols["Dino"]
colVec <- (c(col2rgb(refCol)) / 255) * a + (1 - a) * rep(0.1, 3)
densColVec <- c(densColVec, rgb(colVec[1], colVec[2], colVec[3], 1))
names(densColVec) <- c(paste0(names(normTypeCols), ": High-LS"), "Scran: Low-LS", "scTrans: Low-LS", "Dino: Low-LS")
bwVec <- c()
for(i in c("Scran", "scTrans", "Dino")) {
yVec <- plotDat$y[plotDat$normType == i]
yVec[yVec <= 0] <- 0
bwVec[length(bwVec) + 1] <- 2 * bw.nrd0(yVec)
}
names(bwVec) <- c("Scran", "scTrans", "Dino")
plotDat$bw <- ifelse(plotDat$normType == "Scran", bwVec[1],
ifelse(plotDat$normType == "scTrans", bwVec[2], bwVec[3]))
p.1b <- ggplot(plotDat, aes(x = y, color = normTypeColor, fill = normTypeColor)) +
theme_classic() +
facet_wrap(normType ~ ., ncol = 1, scales = "free", strip.position = "right") +
geom_density(alpha = 0, bw = 10, lwd = 0)
for(i in c("Scran", "scTrans", "Dino")) {
yVec <- plotDat$y[plotDat$normType == i]
yVec[yVec <= 0] <- 0
p.1b <- p.1b +
geom_density(alpha = 0.25, lwd = 1,
bw = bw.nrd0(yVec) * 2,
aes(x = y, color = normTypeColor, fill = normTypeColor),
data = plotDat[plotDat$normType == i, ],
inherit.aes = F)
}
p.1b <- p.1b  +
scale_color_manual(values = densColVec, labels = rep(c("Low", "High"), 3)) +
scale_fill_manual(values = densColVec, labels = rep(c("Low", "High"), 3)) +
scale_y_continuous(trans = "sqrt") +
themeObj +
labs(x = "Normalized expression", y = "Density", color = "LS\nSubset", fill = "LS\nSubset") +
theme(legend.position = "right")
p.1b
p.1b <- annotate_figure(p.1b, fig.lab = "b", fig.lab.size = 21, fig.lab.face = "bold")
save(p.1b,
file = paste0(Save_Dir, "p1b_V3.RData"),
compress = "xz")
save(LowInd, HighInd, plotDat, p.1b,
file = paste0(Save_Dir, "p1bData_V3.RData"),
compress = "xz")
jpeg(paste0(Save_Dir, "Fig1.jpeg"), width = 8, height = 8, units = "in", res = 400, quality = 0.99)
grid.arrange(p.1a, p.1b, p.1c,
layout_matrix = rbind(
c(1, 2, 2),
c(3, 3, 3)
), widths = c(1, 1 / 7, 5 / 7), heights = c(1.4, 1))
dev.off()
jpeg(paste0(Save_Dir, "Fig1.jpeg"), width = 8, height = 8, units = "in", res = 400, quality = 0.99)
grid.arrange(p.1a, p.1b, p.1c,
layout_matrix = rbind(
c(1, 2, 2),
c(3, 3, 3)
), widths = c(1, 1 / 7, 6 / 7), heights = c(1.4, 1))
dev.off()
"'depth' has length not equal to the
number of samples in 'counts'"
devtools::document()
devtools::document()
devtools::load_all()
?dino
data("pbmcSmall")
pbmcSmall <- pbmcSmall[rowSums(pbmcSmall != 0) >= 10, ]
pbmcSmall_Norm <- Dino(pbmcSmall, nCores = 1)
?str
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?chull
data("pbmcSmall")
str(pbmcSmall)
pbmcSmall_Seurat <- SeuratFromDino(pbmcSmall, doNorm = T)
pbmcSmall[1:5, 1;5]
pbmcSmall[1:5, 1:5]
?median
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
summary(rowSums(pbmcSmall > 0))
devtools::document()
devtools::document()
class(pbmcSmall)
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
?pbmcSmall
devtools::document()
devtools::document()
devtools::load_all()
?pbmcSmall
devtools::load_all()
devtools::document()
devtools::document()
devtools::load_all()
?pbmcSmall
data("pbmcSmall")
dim(pbmcSmall)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
?dino
devtools::document()
devtools::document()
devtools::load_all()
?dino
devtools::document()
devtools::document()
devtools::load_all()
?dino
devtools::document()
devtools::document()
devtools::load_all()
?dino
devtools::document()
devtools::document()
devtools::load_all()
?dino
devtools::document()
devtools::document()
devtools::load_all()
?SeuratFromDino
devtools::document()
devtools::document()
devtools::load_all()
?SeuratFromDino
devtools::document()
devtools::document()
devtools::load_all()
?dino
devtools::document()
devtools::document()
devtools::load_all()
?SeuratFromDino
devtools::document()
devtools::document()
devtools::load_all()
?SeuratFromDino
BiocManager::install("BiocCheck")
pathToPkg <- file.path("~/Documents/Research/10X/rProjects/Dino_v0-6-4/", "Dino")
library(BiocCheck)
BiocCheck(pathToPkg)
pathToPkg <- file.path("~/Documents/Research/10X/rProjects/", "Dino_v0-6-4")
BiocCheck(pathToPkg)
?seq_len
seq_len(1)
seq_len(2)
seq_len(4)
BiocCheck(pathToPkg)
BiocCheck(pathToPkg)
BiocCheck(pathToPkg)
pathToPkg <- file.path("~/Documents/Research/10X/rProjects/", "Dino")
BiocCheck(pathToPkg)
BiocCheck(pathToPkg)
class(pbmcSmall)
is(pbmcSmall, "dgCMatrix")
devtools::document()
devtools::document()
devtools::document()
BiocCheck(pathToPkg)
?is
class(pbmcSmall_Seurat)
dim(pbmcSmall_Seurat@assays$RNA@scale.data)
devtools::document()
devtools::document()
BiocCheck(pathToPkg)
devtools::document()
devtools::document()
BiocCheck(pathToPkg)
?BiocCheck
?methods::is
devtools::document()
devtools::document()
BiocCheck(pathToPkg)
